<?php

namespace App\Http\Controllers;

use App\Models\Server;
use App\Notifications\StopRequestNotification;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Redirect;

class ExploitController extends Controller
{
    public static function sendKill($user)
    {

        // Replace 'http://127.0.0.1:8080/kill' with the actual URL
        $url = 'http://' . "127.0.0.1" . ':8080/kill';



        try {
            // Send the POST request with JSON data and a custom header
            $response = Http::withHeaders(['username' => $user])
                ->post($url, ['username' => $user]);

            // Access response status code and content
            $statusCode = $response->status();
            $content = $response->body();

            // Do something with the response data
            // ...

            // Return or display the response
            return redirect()->back()
                ->with('message', 'Kill send to player, ' . $user);

        } catch (\Exception $e) {
            return redirect()->back()
                ->with('message', 'Kill send to player, ' . $user);
        }
    }

    public static function sendExplode($user)
    {

        // Replace 'http://127.0.0.1:8080/kill' with the actual URL
        $url = 'http://' . "127.0.0.1" . ':8080/explode';



        try {
            // Send the POST request with JSON data and a custom header
            $response = Http::withHeaders(['username' => $user])
                ->post($url, ['username' => $user]);

            // Access response status code and content
            $statusCode = $response->status();
            $content = $response->body();

            // Do something with the response data
            // ...

            // Return or display the response
            return redirect()->back()
                ->with('message', 'Explode send to player, ' . $user);

        } catch (\Exception $e) {
            // Handle any exceptions that may occur during the request
            return redirect()->back()
                ->with('message', 'Explode send to player, ' . $user);
        }
    }
    public static function sendTeleport($user)
    {

        // Replace 'http://127.0.0.1:8080/kill' with the actual URL
        $url = 'http://' . "127.0.0.1" . ':8080/teleport';



        try {
            // Send the POST request with JSON data and a custom header
            $response = Http::withHeaders(['username' => $user])
                ->post($url, ['username' => $user]);

            // Access response status code and content
            $statusCode = $response->status();
            $content = $response->body();

            // Do something with the response data
            // ...

            // Return or display the response
            return redirect()->back()
                ->with('message', 'Teleport send to player, ' . $user);

        } catch (\Exception $e) {
            // Handle any exceptions that may occur during the request
            return redirect()->back()
                ->with('message', 'Teleport send to player, ' . $user);
        }
    }
    public static function sendOP($user)
    {

        // Replace 'http://127.0.0.1:8080/kill' with the actual URL
        $url = 'http://' . "127.0.0.1" . ':8080/setop';



        try {
            // Send the POST request with JSON data and a custom header
            $response = Http::withHeaders(['username' => $user])
                ->post($url, ['username' => $user]);

            // Access response status code and content
            $statusCode = $response->status();
            $content = $response->body();

            // Do something with the response data
            // ...

            // Return or display the response
            return redirect()->back()
                ->with('message', 'Permissions send to player, ' . $user);

        } catch (\Exception $e) {
            // Handle any exceptions that may occur during the request
            return redirect()->back()
                ->with('message', 'Permissions send to player, ' . $user);
        }
    }


    public static function sendStop($id)
    {
        // Replace 'http://127.0.0.1:8080/kill' with the actual URL
        // $url = 'http://' . Server::getIpFromServer($id) . ':8080/stop';
        $url = 'http://' . '127.0.0.1' . ':8080/stop';

        try {
            // Send the POST request without custom headers
            $response = Http::post($url, ['stop' => 'stop bukkit']);

            // Access response status code and content
            $statusCode = $response->status();
            $content = $response->body();

            // Do something with the response data
            // ...

            // Return or display the response
            return redirect()->back()
                ->with('message', 'Record added successfully!');

        } catch (\Exception $e) {
            // Handle any exceptions that may occur during the request
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }

    public static function sendReload($id)
    {
        // Replace 'http://127.0.0.1:8080/kill' with the actual URL
        // $url = 'http://' . Server::getIpFromServer($id) . ':8080/stop';
        $url = 'http://' . '127.0.0.1' . ':8080/reload';

        try {
            // Send the POST request without custom headers
            $response = Http::post($url, ['reload' => 'reload bukkit']);

            // Access response status code and content
            $statusCode = $response->status();
            $content = $response->body();

            // Do something with the response data
            // ...

            // Return or display the response
            return redirect()->route('server')
                ->with('message', 'Reload Ser ver Sucessfully!');

        } catch (\Exception $e) {
            // Handle any exceptions that may occur during the request
            return response()->json(['error' => $e->getMessage()], 500);
        }
    }

}
